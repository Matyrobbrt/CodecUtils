import com.matyrobbrt.codecutils.buildscript.CreateOfficialToIntermediary
import com.matyrobbrt.codecutils.buildscript.CreateOfficialToSrg
import com.matyrobbrt.codecutils.buildscript.FindAllCodecs
import com.matyrobbrt.codecutils.buildscript.RemapJar

buildscript {
  repositories {
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
  }
  dependencies {
    classpath 'org.spongepowered:vanillagradle:0.2.1-SNAPSHOT'
  }
}
plugins {
  id 'groovy'
  id 'java-library'
  id 'maven-publish'
  id 'me.champeau.jmh' version '0.6.8'
}

archivesBaseName = 'codecutils'
group = 'com.matyrobbrt.codecutils'
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
  maven {
    url 'https://libraries.minecraft.net/'
  }
  mavenCentral()
  maven {
    name 'MC Forge'
    url 'https://maven.minecraftforge.net'
  }
}

sourceSets {
  reflection
  api {
    compileClasspath += reflection.output
  }
}

configurations {
  apiImplementation.extendsFrom(implementation)
  reflectionImplementation.extendsFrom(implementation)
}

final asmVersion = '9.2'

dependencies {
  compileOnly sourceSets.reflection.output
  testImplementation sourceSets.reflection.output
  compileOnly sourceSets.api.output
  testImplementation sourceSets.api.output

  runtimeOnly 'com.google.code.gson:gson:2.10.1'
  implementation 'com.mojang:datafixerupper:5.0.28'

  implementation "org.ow2.asm:asm:$asmVersion"
  implementation "org.ow2.asm:asm-tree:$asmVersion"
  implementation "org.ow2.asm:asm-util:$asmVersion"
  implementation "org.ow2.asm:asm-commons:$asmVersion"

  testImplementation 'org.apache.groovy:groovy:4.0.6'
  testImplementation 'org.apache.groovy:groovy-json:4.0.6'

  testImplementation 'org.assertj:assertj-core:3.22.0'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

  compileOnly 'org.jetbrains:annotations:24.0.0'
  apiCompileOnly 'org.jetbrains:annotations:24.0.0'
  reflectionCompileOnly 'org.jetbrains:annotations:24.0.0'

  compileOnly 'com.google.auto.service:auto-service:1.0.1'
  annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
}

test {
  useJUnitPlatform()
}

tasks.withType(GroovyCompile).configureEach {
  options.incremental = true
}

jar {
  from sourceSets.api.output
  from sourceSets.reflection.output
}
java.withSourcesJar()
java.withJavadocJar()
javadoc {
  source sourceSets.api.allJava
  options.addStringOption('Xdoclint:none', '-quiet')
}
sourcesJar {
  from sourceSets.api.allJava
  from sourceSets.reflection.allJava
}

subprojects { Project proj ->
  if (!name.startsWith('minecraft-')) return
  final mcVersion = name.substring('minecraft-'.length())

  group = 'com.matyrobbrt.codecutils.minecraft'
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'org.spongepowered.gradle.vanilla'
  apply plugin: com.matyrobbrt.codecutils.buildscript.CUPlugin

  repositories {
    mavenCentral()
  }

  dependencies {
    implementation(rootProject.sourceSets.api.output)
    implementation(rootProject.sourceSets.main.output)
    implementation(rootProject.sourceSets.reflection.output)
    compileOnly('com.google.auto.service:auto-service:1.0.1')
    annotationProcessor('com.google.auto.service:auto-service:1.0.1')
  }

  minecraft {
    version(mcVersion)
  }

  tasks.each {
    if (it.group == 'build')
      it.group = 'other'
  }
  tasks.jar.group = 'build'

  tasks.register('downloadDeobfToSrg', CreateOfficialToSrg) {
    minecraftVersion.set(mcVersion)
    outputMappings.set(file("$buildDir/deobfToSrg.srg"))
  }

  tasks.register('remapToSrg', RemapJar) {
    group = 'build'
    inputFile.set(tasks.jar.archiveFile)
    mappings.set(downloadDeobfToSrg.outputMappings)
    outputFile.set(file("$buildDir/libs/srg/cumc-${mcVersion}-${version}.jar"))
  }

  tasks.register('downloadDeobfToIntermediary', CreateOfficialToIntermediary) {
    minecraftVersion.set(mcVersion)
    outputMappings.set(file("$buildDir/deobfToIntermediary.srg"))
  }

  tasks.register('remapToIntermediary', RemapJar) {
    group = 'build'
    inputFile.set(tasks.jar.archiveFile)
    mappings.set(downloadDeobfToIntermediary.outputMappings)
    outputFile.set(file("$buildDir/libs/intermediary/cumc-${mcVersion}-${version}.jar"))
  }

  tasks.register('findCodecFields', FindAllCodecs) {
    group = 'build'
    it.outputLocation.set(file('src/main/java/com/matyrobbrt/codecutils/minecraft/FoundCodecs.java'))
    it.jarToSearch.set(configurations.minecraft.resolve().find { it.name.endsWith("joined-${mcVersion}.jar") })
  }

  jar.manifest.attributes(['Implementation-Version': version, 'FMLModType': 'GameLibrary'])

  publishing {
    repositories {
      maven {
        name = 'Matyrobbrt'
        url = "https://maven.matyrobbrt.com/$release"
        credentials {
          username = findProperty('matyrobbrtMavenUser') ? matyrobbrtMavenUser : ''
          password = findProperty('matyrobbrtMavenPassword') ? matyrobbrtMavenPassword : ''
        }
      }
    }
    publications {
      srg(MavenPublication) {
        groupId = 'com.matyrobbrt.codecutils.minecraft.srg'
        artifactId = "cumc-${mcVersion}"
        artifacts = [tasks.remapToSrg.outputFile]

        pom(this::configurePom)
        pom {
          name = 'CodecUtilsMCSrg'
        }
      }
      intermediary(MavenPublication) {
        groupId = 'com.matyrobbrt.codecutils.minecraft.intermediary'
        artifactId = "cumc-${mcVersion}"

        artifacts = [tasks.remapToIntermediary.outputFile]

        pom(this::configurePom)
        pom {
          name = 'CodecUtilsMCIntermediary'
        }
      }
    }
  }
}

publishing {
  repositories {
    maven {
      name = 'Matyrobbrt'
      url = "https://maven.matyrobbrt.com/$release"
      credentials {
        username = findProperty('matyrobbrtMavenUser') ? matyrobbrtMavenUser : ''
        password = findProperty('matyrobbrtMavenPassword') ? matyrobbrtMavenPassword : ''
      }
    }
  }
  publications {
    maven(MavenPublication) {
      from components.java
      pom(this::configurePom)
    }
  }
}

void configurePom(MavenPom pom) {
  pom.name = 'CodecUtils'
  pom.description = 'A library used for codec-related utilities.'
  pom.url = 'https://github.com/Matyrobbrt/CodecUtils'
  pom.licenses {
    license {
      name = 'MIT License'
      url = 'https://www.opensource.org/licenses/mit-license.php'
    }
  }
  pom.developers {
    developer {
      id = 'matyrobbrt'
      name = 'Matyrobbrt'
      email = 'matyrobbrt@matyrobbrt.com'
    }
  }
  pom.scm {
    connection = 'scm:git:git:github.com/matyrobbrt/codecutils.git'
    developerConnection = 'scm:git:ssh://github.com/Matyrobbrt/CodecUtils.git'
    url = 'https://github.com/Matyrobbrt/CodecUtils'
  }
}